// Always working with messageExchangeObject
// messageExchangeObject --> Stores all details of last request and response
// Run the request before run the script assertions

Script Assertion samples
=====================

//check response time
assert messageExchange.timeTaken < 4000

//check for Endpoint
def EndPoint = "";
assert messageExchange.getEndpoint() == EndPoint;
 log.info messageExchange.getEndpoint() 
 
//check for TimeTaken
 log.info messageExchange.getTimeTaken()  

//check for header
log.info (messageExchange.responseHeaders["Content-Length"])
assert messageExchange.responseHeaders["Content-Length"] != null

//check attachments
assert messageExchange.responseAttachments.length == 0
log.info (messageExchange.responseAttachments.length)

//validate response nodes
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def requsetHolder = groovyUtils.getXmlHolder( messageExchange.requestContent )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def refNum = responseHolder.getNodeValue("//m:CountryCurrencyResult/m:sName")
assert refNum  == "Rupees"

//to get response
def resp = messageExchange.responseContentAsXml.toString()


For JSON response
-------------------------------

//get json response
import groovy.json.JsonSlurper
def responseMessage = messageExchange.response.responseContent
def json = new JsonSlurper().parseText(responseMessage)

//assert node values
log.info json.name
assert json.capital.toString() != null
assert json.name.toString() == "[Taiwan]"

testStepName = messageExchange.modelItem.testStep.name//to get the Test Step Name
log.info testStepName
xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string


For XML Response
----------------
import com.eviware.soapui.support.XmlHolder
def xmlresponse = messageExchange.response.responseContent
def parsexmlresponse = new XmlHolder(xmlresponse)
parsexmlresponse.namespaces["ns1"]='http://tempuri.org/'
def actualResponse = parsexmlresponse.getNodeValue("//ns1:AddResponse/ns1:AddResult")
//def expectedResult = 
log.info context.getTestCase().getTestSuite().getPropertyValue("expectedValue")
//def expectedResult = 4
//assert expectedResult == actualResponse



The important JSONPath syntax rules are:

$ symbol refers to the root object or element.
@ symbol refers to the current object or element.
. operator is the dot-child operator, which you use to denote a child element of the current element.
[ ] is the subscript operator, which you use to denote a child element of the current element (by name or index).
* operator is a wildcard, returning all objects or elements regardless of their names.
, operator is the union operator, which returns the union of the children or indexes indicated.
: operator is the array slice operator, so you can slice collections using the syntax [start:end:step] to return a subcollection of a collection.
( ) operator lets you pass a script expression in the underlying implementation’s script language. It’s not supported by every implementation of JSONPath, however.
? ( ) to query all items that meet a certain criteria.
